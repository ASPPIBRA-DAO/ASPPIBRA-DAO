type VoteArgs = 
 record {
   proposal_id: nat;
   vote: Vote;
 };
type Vote = 
 variant {
   no;
   yes;
 };
type UpdateSystemParamsPayload = 
 record {
   proposal_submission_deposit: opt Tokens;
   proposal_vote_threshold: opt Tokens;
   transfer_fee: opt Tokens;
 };
type TransferArgs = 
 record {
   amount: Tokens;
   to: principal;
 };
type Tokens = record {amount_e8s: nat;};
type SystemParams = 
 record {
   proposal_submission_deposit: Tokens;
   proposal_vote_threshold: Tokens;
   transfer_fee: Tokens;
 };
type Result_2 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: ProposalState;
 };
type ProposalState = 
 variant {
   accepted;
   executing;
   failed: text;
   open;
   rejected;
   succeeded;
 };
type ProposalPayload = 
 record {
   canister_id: principal;
   message: blob;
   method: text;
 };
type Proposal = 
 record {
   id: nat;
   payload: ProposalPayload;
   proposer: principal;
   state: ProposalState;
   timestamp: int;
   voters: List;
   votes_no: Tokens;
   votes_yes: Tokens;
 };
type List = 
 opt record {
       principal;
       List;
     };
type DAO = 
 service {
   /// Retornar o saldo da conta do `caller`
   account_balance: () -> (Tokens) query;
   /// Função para criar uma nova conta para o `caller` com saldo inicial opcional
   create_account: (opt Tokens) -> (Result_1);
   /// Retornar a proposta com o ID fornecido, se existir
   get_proposal: (nat) -> (opt Proposal) query;
   /// Retorna os parâmetros atuais do sistema
   get_system_params: () -> (SystemParams) query;
   /// Listar todas as contas
   list_accounts: () -> (vec Account) query;
   /// Retornar a lista de todas as propostas
   list_proposals: () -> (vec Proposal) query;
   /// Submeter uma proposta
   submit_proposal: (ProposalPayload) -> (Result_2);
   /// Transferir tokens da conta do `caller` para outra conta
   transfer: (TransferArgs) -> (Result_1);
   /// Atualizar parâmetros do sistema
   update_system_params: (UpdateSystemParamsPayload) -> ();
   vote: (VoteArgs) -> (Result);
 };
type BasicDaoStableStorage = 
 record {
   accounts: vec Account;
   proposals: vec Proposal;
   system_params: SystemParams;
 };
type Account = 
 record {
   owner: principal;
   tokens: Tokens;
 };
service : (BasicDaoStableStorage) -> DAO
